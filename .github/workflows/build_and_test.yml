name: Build and test

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
      - 'wheel/**'
      - 'runci/**'
  release:
    types:
      - created
      - edited
  schedule:
    # 04:00 every Tuesday morning
    - cron: '0 4 * * 2'

env:
  PYTKET_REMOTE_QISKIT_TOKEN: ${{ secrets.PYTKET_REMOTE_QISKIT_TOKEN }}

jobs:
  qiskit-checks:
    name: Qiskit - Build and test module
    strategy:
      matrix:
        os: ['ubuntu-latest', 'macos-14', 'windows-latest']
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: '0'
        submodules: recursive
    - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/* +refs/heads/*:refs/remotes/origin/*
    - name: Set up Python 3.10
      if: github.event_name == 'push' || github.event_name == 'schedule'
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: Build and test (3.10)
      if: github.event_name == 'push' || github.event_name == 'schedule'
      shell: bash
      run: |
        ./.github/workflows/build-test nomypy
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    - name: Build and test including remote checks (3.11) mypy
      if:  (matrix.os == 'ubuntu-latest') && (github.event_name == 'push' || (github.event_name == 'pull_request' &&  github.event.pull_request.head.repo.full_name == github.repository) || github.event_name == 'release' || github.event_name == 'schedule' )
      shell: bash
      run: |
        ./.github/workflows/build-test mypy
      env:
        PYTKET_RUN_REMOTE_TESTS: 1
    - name: Build and test (3.11) nomypy
      if:  (matrix.os != 'macos-14') && (github.event_name == 'push' || (github.event_name == 'pull_request' &&  github.event.pull_request.head.repo.full_name == github.repository) || github.event_name == 'release' || github.event_name == 'schedule')
      shell: bash
      run: |
        ./.github/workflows/build-test nomypy
    - name: Set up Python 3.12
      if: github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'schedule'
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    - name: Build and test (3.12)
      if: github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'schedule'
      shell: bash
      run: |
        ./.github/workflows/build-test nomypy
    - uses: actions/upload-artifact@v4
      if: github.event_name == 'release' || contains(github.ref, 'refs/heads/wheel')
      with:
        name: artefact-${{ matrix.os }}
        path: wheelhouse/
    - name: Install poetry
      run: pip install poetry
    - name: Install docs dependencies
      if:  (matrix.os == 'ubuntu-latest') && (github.event_name == 'pull_request' || github.event_name == 'schedule' )
      run: |
        bash ./docs/install.sh
        cd docs
        for w in `find ../wheelhouse/ -type f -name "*.whl"` ; do poetry run pip install $w ; done
        cd ..
    - name: Build docs
      if:  (matrix.os == 'ubuntu-latest') && (github.event_name == 'pull_request' || github.event_name == 'schedule' )
      timeout-minutes: 20
      run: |
        cd docs && poetry run bash ./build-docs.sh


  publish_to_pypi:
    name: Publish to pypi
    if: github.event_name == 'release'
    needs: qiskit-checks
    runs-on: ubuntu-latest
    steps:
    - name: Download all wheels
      # downloading all three files into the wheelhouse
      # all files are identical, so there will only be one file
      uses: actions/download-artifact@v4
      with:
        path: wheelhouse
        pattern: artefact-*
        merge-multiple: true
    - name: Put them all in the dist folder
      run: |
        mkdir dist
        for w in `find wheelhouse/ -type f -name "*.whl"` ; do cp $w dist/ ; done
    - name: Publish wheels
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_PYTKET_QISKIT_API_TOKEN }}
        verbose: true
